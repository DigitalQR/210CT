/**
TASK (Advanced)

Given two strings of n and m integer elements, write the pseudocode to compute:
a) The string that contains all the elements belonging to both strings.
b) The string of all the elements of the two given strings, written once.
c) The string of the elements from the first string, without the elements that are also
in the second string.
What's the run time?
**/

a.
FUNCTION StringIntersection(string_n, string_m)
	//Inputs:
	//string_n A string of integer elements (n elements long)
	//string_m A string of integer elements (m elements long)
			
	output <- new Set //to store integer outputs
	
	FOR EACH number_n IN string_n DO
		FOR EACH number_m IN string_m DO
			IF number_n = number_m THEN
				PUT number_n IN output
			END IF
		END FOR
	END FOR

	RETURN output
END FUNCTION

b.
FUNCTION StringUnion(string_n, string_m)
	//Inputs:
	//string_n A string of integer elements (n elements long)
	//string_m A string of integer elements (m elements long)

	output <- new Set //to store integer outputs

	FOR EACH number IN string_n AND string_m DO
		PUT number IN output

	RETURN output
END FUNCTION


c.
FUNCTION StringComplement(string_n, string_m)	
	//Inputs:
	//string_n A string of integer elements (n elements long)
	//string_m A string of integer elements (m elements long)

	output <- list to store integer outputs initialized with values of string_n

	FOR EACH number IN string_m DO
		IF number IN output DO
			REMOVE number FROM output
		END IF
	END FOR
	
	RETURN output
END FUNCTION


a. has an O(n^2)
b. has an O(n) 
c. has an (At least) O(n) (Dependant on implementation of "IF number IN output DO") 
This is also not taking into consideration the big O of language specific task e.g. BigO of Sets (More specifically adding to a set)